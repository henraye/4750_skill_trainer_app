plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new RuntimeException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '2'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.hentran.skill_trainer"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.hentran.skill_trainer"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = 1
        versionName = "1.0.1"
        multiDexEnabled true
        
        // Remove AD_ID permission and set application name
        manifestPlaceholders = [
            'useAdId': 'false',
            'applicationName': 'android.app.Application'
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'FULL'
            }
            // Add API key for production
            buildConfigField "String", "OPENAI_API_KEY", "\"${System.getenv('OPENAI_API_KEY')}\""
            
            // Generate config.dart before building
            preBuild.dependsOn('generateConfig')
        }
        debug {
            // Add API key for development
            buildConfigField "String", "OPENAI_API_KEY", "\"${System.getenv('OPENAI_API_KEY')}\""
            
            // Generate config.dart before building
            preBuild.dependsOn('generateConfig')
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation('com.google.firebase:firebase-auth') {
        exclude group: 'com.google.android.gms', module: 'play-services-ads-identifier'
        exclude group: 'androidx.privacysandbox.ads', module: 'ads-adservices'
        exclude group: 'androidx.privacysandbox.ads', module: 'ads-adservices-java'
    }
    implementation 'com.android.support:multidex:1.0.3'
}

// Add task to generate config.dart
task generateConfig {
    doLast {
        def openaiApiKey = System.getenv('OPENAI_API_KEY') ?: ''
        def configContent = """// This file is automatically generated during build
// DO NOT EDIT MANUALLY

class Config {
  static const String openaiApiKey = '$openaiApiKey';
}
"""
        def configFile = new File(project.rootDir, '../lib/config.dart')
        configFile.parentFile.mkdirs()
        configFile.write(configContent)
        println "Generated config.dart at ${configFile.absolutePath}"
    }
}
